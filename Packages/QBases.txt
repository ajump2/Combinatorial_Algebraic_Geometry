read("IG(3,7)_Maple.txt"):
with(qcalc):
with(Groebner):
with(ListTools);

QBases := module()
option package;

export
  Partitions,DisplayTable,QBasis,QMatrix,QTab;

local grid;

global S;
S[]:=1;

Partitions := proc (k, n)
 local binOp, conList, ideal, Dimension, numGen, classes, gen, IntSet;
  Dimension := k*(n-k); numGen := n-k; Gr(k, n); classes := schub_classes();
  print(Gr(k,n));
  gen := {seq(i, i in generators())};
  IntSet := classes;
  binOp := proc (X)
  local r;
  r:=[qmult(X[1], X[2])-X[1]*X[2]];
  if X[1]=S[1] and X[2]=S[1,1] then r:=[op(r)-q]; fi;
  return(r);
  end proc;
  conList := [seq(seq(op(binOp([i, j])), i in gen), j in IntSet)];
  ideal := {op(conList)} minus {op(SelectFirst(n-k,conList))};
  return [op(ideal)], gen, IntSet minus gen;
end proc:

grid := proc (M::Matrix,wid)
local i, j, Ms, m, n, wks;
m, n := op(1, M);
Ms := map(convert, M, string);
wks := XMLTools:-ToString(
_XML_Worksheet(DocumentTools:-Layout:-Table(
 ':-alignment' = ':-center',
 ':-width' = wid,
     seq(DocumentTools:-Layout:-Column(':-weight' = 3+max(map(
         length,
         Ms[() .. (), j]))), j = 1 .. n),
           seq(DocumentTools:-Layout:-Row(
                seq(DocumentTools:-Layout:-Cell(
                `_XML_Text-field`(
                "alignment" = "centred",
                "style" = "Text",
                Ms[i, j])),
                j = 1 .. n)),
                i = 1 .. m))));
streamcall(INTERFACE_TASKTEMPLATE(':-insertdirect', ':-content' = wks));
NULL:
end proc:

DisplayTable := proc (k, n, wid)
local M, binOp, conList, ideal, Dimension, numGen, classes, gen, IntSet;
  Dimension := k*(n-k);
  numGen := n-k;
  Gr(k, n);
  classes := schub_classes();
  gen := {seq(i, i in generators())};
  IntSet := classes;
  binOp:=proc (X)
  local r;
  r:=[qmult(X[1], X[2])-X[1]*X[2]];
  if X[1]=S[1] and X[2]=S[1,1] then r:=[op(r)-q]; fi;
  return(r);
  end proc;
  M := [seq([j, seq(op(binOp([i, j])), i in IntSet)], j in gen)];
  grid(<(Matrix([qmult, op(IntSet)]), Matrix(M))>,wid);
 end proc:

QBasis := proc (k, n)
local Ideal, bas, mOrder, Dimension, numGen, classes, gen, IntSet;
 Gr(k,n):
 Ideal, gen, IntSet := Partitions(k, n);
 mOrder := plex(op(IntSet minus {S[]}),q,op(gen));
 print(mOrder);
 bas := Basis(Ideal, mOrder);
 return bas;
end proc:

QMatrix:=proc(k,n,S)
local gen,nGen,Matr,lambda,Mcol,Mfunc;
    Gr(k,n);
    gen:=generators();
    nGen:=nops(gen);
    Mcol:=nops([op(S)]);
    lambda:=[op(S)][1];
    Mfunc:=proc(i,j)
        local S;
        if lambda+j-i > nGen then 0;
        elif lambda+j-i < 0 then 0;
        elif lambda+j-i = 0 then S[];
        else gen[lambda+j-i];
            end if;
    end proc:
    Matr:=Matrix(Mcol,Mcol,Mfunc);
    return(Matr);
    end proc:

QTab:=proc(n,N)
    local SSets,d,k,Con,SetBuildLambda,SetBuildMu,Cond1,lamMu,CompareSet,ReturnSet,i,j,TablSet;
    Gr(n,N);
    k:=N-n;
    d:=[seq(i,i=1.. k)];

    SSets:=Reverse(
        [[seq(0,i=0..(k-1))],
            op(
                map(
                    proc (x) options operator,
                        arrow;
                        [op(x)] end proc,
                    schub_classes()
                   )
              )
        ]
                  );
    lamMu:=[];
    for i from 1 to nops(SSets) do
        for j from i+1 to nops(SSets) do
            lamMu:=[op(lamMu),[SSets[j],SSets[i]]];
            od;
    od;

    #print(table(lamMu));
    Con:=proc(X)
    local MatIndices,i,j,l,m;
        l:=X[1];
        m:=X[2];
        i:=nops(l);
        j:=nops(m);
        map(evalhf,zip(`>`,m,l));

    end proc:
    SetBuildLambda:=proc(lamb)
    local lambdaSet,n,muSet;
        lambdaSet:=[];
        muSet:=[];
        n:=seq(i,i=1..nops(lamb));
        lambdaSet:=[op(lambdaSet),seq(seq(
            lamb[i]+j, i in n),j in k)];
    return(lambdaSet);
    end proc:
    SetBuildMu:=proc(mu)
    local muSet,n;
        muSet:=[];
        n:=seq(i,i=1..nops(mu));
        muSet:=[op(muSet),seq(mu[i]+0, i in n)];
        muSet:=[op(muSet),seq(mu[i]+0, i in n)];
    return(muSet);
    end proc:
    Cond1:=proc(X)
    local lamb,mu,l,m,Comp1,Comp2;
        lamb:=X[1];
        mu:=X[2];
        if nops(lamb)<>k then
            l:=[op(lamb),seq(0,i=nops(lamb).. k-1)];
        else l:=lamb
        fi;
        if nops(mu)<>k then
            m:=[op(mu),seq(0,i=nops(mu).. k-1)];
            else m:=mu
        fi;
        Comp1:=SetBuildLambda(l);
        Comp2:=SetBuildMu(m);
        return([Comp1,Comp2]);
    end proc:
    CompareSet:=map(Cond1,lamMu);
    #print(table(CompareSet));
    ReturnSet:=map(Con,CompareSet);
    TablSet:=map(x->Matrix(k,k,x),ReturnSet);
    return(
        zip(`[]`,
            zip(`[]`,
                map(
                    x->["lambda",x[2],"mu",x[1]],CompareSet
                   ),
                map(
                    x->["lambda[0:d]",x[2],"mu[0]",x[1]],
                    lambMu
                   )
               ),
               TablSet
            )
          );
     end proc:
end module:
